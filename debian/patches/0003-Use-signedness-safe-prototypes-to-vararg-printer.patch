From: Klee Dienes <klee@mit.edu>
Date: Sat, 1 Mar 2014 21:52:05 +0000
Subject: Use signedness-safe prototypes to vararg printer.

---
 include/hidrd/util/num.h | 21 +++++++++++++--------
 lib/fmt/spec/snk/item.c  |  8 ++++----
 lib/fmt/xml/snk/item.c   | 20 ++++++++++----------
 lib/util/num.c           | 22 +++++++++++++++++-----
 lib/util/num_test.c      | 30 +++++++++++++++---------------
 5 files changed, 59 insertions(+), 42 deletions(-)

diff --git a/include/hidrd/util/num.h b/include/hidrd/util/num.h
index 32c8449..1bd14da 100644
--- a/include/hidrd/util/num.h
+++ b/include/hidrd/util/num.h
@@ -582,7 +582,8 @@ extern bool hidrd_num_from_alt_str(void *pnum, const char *str, ...);
  * @return Dynamically allocated string, or NULL if the match is not found
  *         or an error occurred; check errno for the latter.
  */
-typedef char *hidrd_num_fmt8_fn(uint8_t num);
+typedef char *hidrd_num_fmt8_fn(int8_t num);
+typedef char *hidrd_num_fmtu8_fn(uint8_t num);
 
 /**
  * Prototype for a function used to format an 16-bit number string (either
@@ -596,7 +597,8 @@ typedef char *hidrd_num_fmt8_fn(uint8_t num);
  * @return Dynamically allocated string, or NULL if the match is not found
  *         or an error occurred; check errno for the latter.
  */
-typedef char *hidrd_num_fmt16_fn(uint16_t num);
+typedef char *hidrd_num_fmt16_fn(int16_t num);
+typedef char *hidrd_num_fmtu16_fn(uint16_t num);
 
 /**
  * Prototype for a function used to format an 32-bit number string (either
@@ -610,7 +612,8 @@ typedef char *hidrd_num_fmt16_fn(uint16_t num);
  * @return Dynamically allocated string, or NULL if the match is not found
  *         or an error occurred; check errno for the latter.
  */
-typedef char *hidrd_num_fmt32_fn(uint32_t num);
+typedef char *hidrd_num_fmt32_fn(int32_t num);
+typedef char *hidrd_num_fmtu32_fn(uint32_t num);
 
 /**
  * Convert a number to a string of alternate formats.
@@ -627,13 +630,14 @@ typedef char *hidrd_num_fmt32_fn(uint32_t num);
  *
  * @note Always resets errno.
  */
-char *hidrd_num_to_alt_str(size_t bits, ...);
+char *hidrd_num_to_alt_str(size_t bits, int sign, ...);
 
 /**
  * Convert a number to a string of two alternate formats, without additional
  * conversion.
  *
  * @param _t    The number type name token.
+ * @param _s    True iff the type name token is a signed type.
  * @param _n    The number to convert.
  * @param _r1   First converter representation token.
  * @param _r2   Second converter representation token.
@@ -641,8 +645,8 @@ char *hidrd_num_to_alt_str(size_t bits, ...);
  * @return Dynamically allocated string, or NULL if failed to find a match
  *         or an error occurred; check errno for the latter.
  */
-#define HIDRD_NUM_TO_ALT_STR1_1(_t, _n, _r1, _r2) \
-    hidrd_num_to_alt_str(sizeof(hidrd_##_t) * 8, _n,    \
+#define HIDRD_NUM_TO_ALT_STR1_1(_t, _s, _n, _r1, _r2)	\
+    hidrd_num_to_alt_str(sizeof(hidrd_##_t) * 8, _s, _n,\
                          hidrd_##_t##_to_##_r1, NULL,   \
                          hidrd_##_t##_to_##_r2, NULL,   \
                          NULL)
@@ -652,6 +656,7 @@ char *hidrd_num_to_alt_str(size_t bits, ...);
  * string having additional processing.
  *
  * @param _t    The number type name token.
+ * @param _s    True iff the type name token is a signed type.
  * @param _n    The number to convert.
  * @param _r1   First converter representation token (hex, token, etc.).
  * @param _p1   First converter processing function name (uc, lc, etc.).
@@ -660,8 +665,8 @@ char *hidrd_num_to_alt_str(size_t bits, ...);
  * @return Dynamically allocated string, or NULL if failed to find a match
  *         or an error occurred; check errno for the latter.
  */
-#define HIDRD_NUM_TO_ALT_STR2_1(_t, _n, _r1, _p1, _r2) \
-    hidrd_num_to_alt_str(sizeof(hidrd_##_t) * 8, _n,                    \
+#define HIDRD_NUM_TO_ALT_STR2_1(_t, _s, _n, _r1, _p1, _r2)		\
+    hidrd_num_to_alt_str(sizeof(hidrd_##_t) * 8, _s, _n, 		\
                          hidrd_##_t##_to_##_r1, hidrd_str_##_p1, NULL,  \
                          hidrd_##_t##_to_##_r2, NULL,                   \
                          NULL)
diff --git a/lib/fmt/spec/snk/item.c b/lib/fmt/spec/snk/item.c
index 9b39f74..49925f3 100644
--- a/lib/fmt/spec/snk/item.c
+++ b/lib/fmt/spec/snk/item.c
@@ -186,7 +186,7 @@ spec_snk_item_main(hidrd_spec_snk_inst *spec_snk,
                       VALUE(STROWN,
                            hidrd_tkn_hmnz(
                             HIDRD_NUM_TO_ALT_STR1_1(
-                                item_collection_type,
+                                item_collection_type, 0,
                                 hidrd_item_collection_get_type(item),
                                 token, dec),
                             HIDRD_TKN_HMNZ_CAP_WF))))
@@ -235,7 +235,7 @@ spec_snk_item_global(hidrd_spec_snk_inst *spec_snk,
                      VALUE(STROWN,
                            hidrd_tkn_hmnz(
                             HIDRD_NUM_TO_ALT_STR1_1(
-                                usage_page,
+                                usage_page, 0,
                                 hidrd_item_usage_page_get_value(item),
                                 token, shex),
                             HIDRD_TKN_HMNZ_CAP_WF)),
@@ -327,7 +327,7 @@ spec_snk_item_usage(hidrd_spec_snk_inst    *spec_snk,
 
     if (hidrd_usage_get_page(usage) == spec_snk->state->usage_page)
     {
-        token_or_bhex = HIDRD_NUM_TO_ALT_STR1_1(usage, usage,
+        token_or_bhex = HIDRD_NUM_TO_ALT_STR1_1(usage, 0, usage,
                                                 id_token, id_shex);
         if (token_or_bhex == NULL)
             goto cleanup;
@@ -337,7 +337,7 @@ spec_snk_item_usage(hidrd_spec_snk_inst    *spec_snk,
     }
     else
     {
-        token_or_bhex = HIDRD_NUM_TO_ALT_STR1_1(usage, usage,
+        token_or_bhex = HIDRD_NUM_TO_ALT_STR1_1(usage, 0, usage,
                                                 token, shex);
         if (token_or_bhex == NULL)
             goto cleanup;
diff --git a/lib/fmt/xml/snk/item.c b/lib/fmt/xml/snk/item.c
index ff2ca9f..9c6d1e6 100644
--- a/lib/fmt/xml/snk/item.c
+++ b/lib/fmt/xml/snk/item.c
@@ -131,7 +131,7 @@ xml_snk_item_main(hidrd_xml_snk_inst   *xml_snk,
                     COLLECTION,
                     ATTR(type, STROWN,
                          HIDRD_NUM_TO_ALT_STR2_1(
-                             item_collection_type,
+                             item_collection_type, 0,
                              hidrd_item_collection_get_type(item),
                              token, lc, dec)));
         case HIDRD_ITEM_MAIN_TAG_END_COLLECTION:
@@ -172,7 +172,7 @@ xml_snk_item_main(hidrd_xml_snk_inst   *xml_snk,
                     main,
                     ATTR(tag, STROWN,
                          HIDRD_NUM_TO_ALT_STR2_1(
-                             item_main_tag, tag, token, lc, dec)),
+                             item_main_tag, 0, tag, token, lc, dec)),
                     CONTENT(
                         HEX,
                         /* We promise we won't change it */
@@ -193,7 +193,7 @@ xml_snk_item_unit_generic(hidrd_xml_snk_inst   *xml_snk,
     if (!xml_snk_element_add(xml_snk, true, "generic",
                      ATTR(system, STROWN,
                           HIDRD_NUM_TO_ALT_STR2_1(
-                              unit_system,
+                              unit_system, 0,
                               hidrd_unit_get_system(unit),
                               token, lc, dec)),
                      XML_SNK_ELEMENT_NT_NONE))
@@ -412,7 +412,7 @@ xml_snk_item_global(hidrd_xml_snk_inst *xml_snk,
                     usage_page,
                     CONTENT(STROWN,
                             HIDRD_NUM_TO_ALT_STR2_1(
-                                usage_page,
+                                usage_page, 0,
                                 hidrd_item_usage_page_get_value(item),
                                 token, lc, hex)),
                     COMMENT(STROWN,
@@ -457,7 +457,7 @@ xml_snk_item_global(hidrd_xml_snk_inst *xml_snk,
                     global,
                     ATTR(tag, STROWN,
                          HIDRD_NUM_TO_ALT_STR2_1(
-                             item_global_tag, tag, token, lc, dec)),
+                             item_global_tag, 0, tag, token, lc, dec)),
                     CONTENT(HEX,
                             /* We promise we won't change it */
                             hidrd_item_short_get_data((hidrd_item *)item)),
@@ -487,7 +487,7 @@ xml_snk_item_usage(hidrd_xml_snk_inst  *xml_snk,
 
     if (hidrd_usage_get_page(usage) == xml_snk->state->usage_page)
     {
-        token_or_hex = HIDRD_NUM_TO_ALT_STR2_1(usage, usage,
+        token_or_hex = HIDRD_NUM_TO_ALT_STR2_1(usage, 0, usage,
                                                token, lc, id_hex);
         if (token_or_hex == NULL)
             XML_ERR_CLNP("failed to convert usage to string");
@@ -497,7 +497,7 @@ xml_snk_item_usage(hidrd_xml_snk_inst  *xml_snk,
     }
     else
     {
-        token_or_hex = HIDRD_NUM_TO_ALT_STR2_1(usage, usage,
+        token_or_hex = HIDRD_NUM_TO_ALT_STR2_1(usage, 0, usage,
                                                token, lc, hex);
         if (token_or_hex == NULL)
             XML_ERR_CLNP("failed to convert usage to string");
@@ -576,7 +576,7 @@ xml_snk_item_local(hidrd_xml_snk_inst  *xml_snk,
                     local,
                     ATTR(tag, STROWN,
                          HIDRD_NUM_TO_ALT_STR2_1(
-                             item_local_tag, tag, token, lc, dec)),
+                             item_local_tag, 0, tag, token, lc, dec)),
                     CONTENT(HEX,
                             /* We promise we won't change it */
                             hidrd_item_short_get_data((hidrd_item *)item)),
@@ -603,7 +603,7 @@ xml_snk_item_short(hidrd_xml_snk_inst  *xml_snk,
             return ADD_SIMPLE(short,
                     ATTR(type, STROWN,
                          HIDRD_NUM_TO_ALT_STR2_1(
-                             item_short_type,
+                             item_short_type, 0,
                              hidrd_item_short_get_type(item),
                              token, lc, dec)),
                     ATTR(tag, STROWN,
@@ -640,7 +640,7 @@ xml_snk_item_basic(hidrd_xml_snk_inst  *xml_snk,
             return ADD_SIMPLE(basic,
                     ATTR(type, STROWN,
                          HIDRD_NUM_TO_ALT_STR2_1(
-                             item_basic_type,
+                             item_basic_type, 0,
                              hidrd_item_basic_get_type(item),
                              token, lc, dec)),
                     ATTR(tag, STROWN,
diff --git a/lib/util/num.c b/lib/util/num.c
index c27f8f4..d1eb6dd 100644
--- a/lib/util/num.c
+++ b/lib/util/num.c
@@ -462,7 +462,7 @@ hidrd_num_from_alt_str(void *pnum, const char *str, ...)
 
 
 char *
-hidrd_num_to_alt_str(size_t bits, ...)
+hidrd_num_to_alt_str(size_t bits, int sign, ...)
 {
     va_list             ap;
     char               *result      = NULL;
@@ -474,7 +474,7 @@ hidrd_num_to_alt_str(size_t bits, ...)
 
     assert(bits == 8 || bits == 16 || bits == 32);
 
-    va_start(ap, bits);
+    va_start(ap, sign);
 
     /*
      * This should handle smaller types since they are all promoted to int
@@ -488,13 +488,25 @@ hidrd_num_to_alt_str(size_t bits, ...)
         switch (bits)
         {
             case 8:
-                str = (*(hidrd_num_fmt8_fn *)fmt_fn)(n);
+	        if (sign) { 
+		    str = (*(hidrd_num_fmt8_fn *)fmt_fn)(n);
+		} else {
+		    str = (*(hidrd_num_fmtu8_fn *)fmt_fn)(n);
+		}
                 break;
             case 16:
-                str = (*(hidrd_num_fmt16_fn *)fmt_fn)(n);
+	        if (sign) { 
+		    str = (*(hidrd_num_fmt16_fn *)fmt_fn)(n);
+		} else {
+		    str = (*(hidrd_num_fmtu16_fn *)fmt_fn)(n);
+		}
                 break;
             case 32:
-                str = (*(hidrd_num_fmt32_fn *)fmt_fn)(n);
+	        if (sign) { 
+		    str = (*(hidrd_num_fmt32_fn *)fmt_fn)(n);
+		} else {
+		    str = (*(hidrd_num_fmtu32_fn *)fmt_fn)(n);
+		}
                 break;
             default:
                 errno = EINVAL;
diff --git a/lib/util/num_test.c b/lib/util/num_test.c
index f27c318..3fa46ff 100644
--- a/lib/util/num_test.c
+++ b/lib/util/num_test.c
@@ -107,11 +107,11 @@ TEST_TYPE(u16);
 TEST_TYPE(s32);
 TEST_TYPE(u32);
 
-#define PASS_TO_ALT_STR1_1(_res, _t, _n, _c, _d) \
+#define PASS_TO_ALT_STR1_1(_res, _t, _s, _n, _c, _d)		\
     do {                                                        \
         char   *str;                                            \
                                                                 \
-        str = HIDRD_NUM_TO_ALT_STR1_1(_t, _n, _c, _d);          \
+        str = HIDRD_NUM_TO_ALT_STR1_1(_t, _s, _n, _c, _d);	\
         if (str == NULL)                                        \
             ERROR("Formatting result is NULL unexpectedly");    \
         if (strcmp(str, _res) != 0)                             \
@@ -312,19 +312,19 @@ main(int argc, char **argv)
     FAIL_FROM_STR(u32,  "0x a",         PFX,    HEX);
     PASS_FROM_STR(u32,  0xA,    "0xa",  PFX,    HEX);
 
-    PASS_TO_ALT_STR1_1("0",          test_u8,    0,          null, dec);
-    PASS_TO_ALT_STR1_1("255",        test_u8,    UINT8_MAX,  null, dec);
-    PASS_TO_ALT_STR1_1("0",          test_u16,   0,          null, dec);
-    PASS_TO_ALT_STR1_1("65535",      test_u16,   UINT16_MAX, null, dec);
-    PASS_TO_ALT_STR1_1("0",          test_u32,   0,          null, dec);
-    PASS_TO_ALT_STR1_1("4294967295", test_u32,   UINT32_MAX, null, dec);
-
-    PASS_TO_ALT_STR1_1("-128",           test_s8,    INT8_MIN,   null, dec);
-    PASS_TO_ALT_STR1_1("127",            test_s8,    INT8_MAX,   null, dec);
-    PASS_TO_ALT_STR1_1("-32768",         test_s32,   INT16_MIN,  null, dec);
-    PASS_TO_ALT_STR1_1("32767",          test_s32,   INT16_MAX,  null, dec);
-    PASS_TO_ALT_STR1_1("-2147483648",    test_s32,   INT32_MIN,  null, dec);
-    PASS_TO_ALT_STR1_1("2147483647",     test_s32,   INT32_MAX,  null, dec);
+    PASS_TO_ALT_STR1_1("0",          test_u8, 0,    0,          null, dec);
+    PASS_TO_ALT_STR1_1("255",        test_u8, 0,    UINT8_MAX,  null, dec);
+    PASS_TO_ALT_STR1_1("0",          test_u16, 0,   0,          null, dec);
+    PASS_TO_ALT_STR1_1("65535",      test_u16, 0,   UINT16_MAX, null, dec);
+    PASS_TO_ALT_STR1_1("0",          test_u32, 0,   0,          null, dec);
+    PASS_TO_ALT_STR1_1("4294967295", test_u32, 0,   UINT32_MAX, null, dec);
+
+    PASS_TO_ALT_STR1_1("-128",           test_s8, 1,    INT8_MIN,   null, dec);
+    PASS_TO_ALT_STR1_1("127",            test_s8, 1,    INT8_MAX,   null, dec);
+    PASS_TO_ALT_STR1_1("-32768",         test_s32, 1,   INT16_MIN,  null, dec);
+    PASS_TO_ALT_STR1_1("32767",          test_s32, 1,   INT16_MAX,  null, dec);
+    PASS_TO_ALT_STR1_1("-2147483648",    test_s32, 1,   INT32_MIN,  null, dec);
+    PASS_TO_ALT_STR1_1("2147483647",     test_s32, 1,   INT32_MAX,  null, dec);
 
     return 0;
 }
